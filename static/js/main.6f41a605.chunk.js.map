{"version":3,"sources":["components/layout/Navbar.js","components/layout/Banner.js","reducers/BlogReducer.js","context/BlogContext.js","components/posts/PostCard.js","components/posts/PostList.js","components/pages/HomePage.js","components/pages/PostPage.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Banner","BlogReducer","state","action","type","loading","blogPosts","payload","currentBlogPost","BlogContext","createContext","BlogContextProvider","props","useReducer","dispatch","getPosts","a","length","fetch","process","response","json","data","articles","console","log","Provider","value","getPostBYId","id","currentPost","filter","post","index","Number","children","PostCard","postId","urlToImage","author","title","publishedAt","alt","src","format","PostList","useContext","useEffect","postList","map","key","HomePage","PostPage","useParams","content","href","url","Footer","App","path","exact","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f41a605.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <Link to=\"/\">\r\n        <h1>Blog Post</h1>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst Banner = () => {\r\n  return <div>banner</div>;\r\n};\r\n\r\nexport default Banner;\r\n","export const BlogReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SEND_REQUEST':\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    case 'REQUEST_FINISH':\r\n      return {\r\n        ...state,\r\n        loading: false\r\n      };\r\n    case 'SET_POSTS':\r\n      return {\r\n        ...state,\r\n        blogPosts: action.payload\r\n      };\r\n    case 'SET_POST':\r\n      return {\r\n        ...state,\r\n        currentBlogPost: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { BlogReducer } from '../reducers/BlogReducer';\r\n\r\nexport const BlogContext = createContext();\r\n\r\nconst BlogContextProvider = props => {\r\n  const initialState = {\r\n    blogPosts: [],\r\n    currentBlogPost: null,\r\n    loading: true\r\n  };\r\n\r\n  const API_KEY = process.env.REACT_APP_NEWS_KEY;\r\n\r\n  const [state, dispatch] = useReducer(BlogReducer, initialState);\r\n\r\n  const getPosts = async () => {\r\n    if (state.blogPosts.length === 0) {\r\n      try {\r\n        dispatch({ type: 'SEND_REQUEST' });\r\n        const response = await fetch(\r\n          `https://newsapi.org/v2/everything?q=javascript&pageSize=10&apiKey=${API_KEY}`\r\n        );\r\n        const data = await response.json();\r\n        dispatch({ type: 'REQUEST_FINISH' });\r\n        dispatch({ type: 'SET_POSTS', payload: data.articles });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getPostBYId = id => {\r\n    if (state.blogPosts.length > 0) {\r\n      dispatch({ type: 'SEND_REQUEST' });\r\n      const currentPost = state.blogPosts.filter((post, index) => index === Number(id));\r\n      console.log(id);\r\n      dispatch({ type: 'SET_POST', payload: currentPost });\r\n      dispatch({ type: 'REQUEST_FINISH' });\r\n    } else return null;\r\n  };\r\n\r\n  // what is differnce between\r\n  // value={{blogPosts: state.blogPosts, currentBlogPost: state.currentBlogPost, loading: state.loading}}\r\n  // and value={{state}}\r\n  return (\r\n    <BlogContext.Provider\r\n      value={{\r\n        blogPosts: state.blogPosts,\r\n        currentBlogPost: state.currentBlogPost,\r\n        loading: state.loading,\r\n        getPosts,\r\n        getPostBYId\r\n      }}\r\n    >\r\n      {props.children}\r\n    </BlogContext.Provider>\r\n  );\r\n};\r\n\r\nexport default BlogContextProvider;\r\n","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PostCard = ({ postId, post: { urlToImage, author, title, publishedAt } }) => {\r\n  return (\r\n    <article className=\"card\">\r\n      <img\r\n        className=\"card__image\"\r\n        alt=\"\"\r\n        src={\r\n          urlToImage\r\n            ? urlToImage\r\n            : `https://via.placeholder.com/300X150.png/eee/333?text=No+image+available`\r\n        }\r\n      />\r\n      <Link to={`/${postId}`}>\r\n        <h3 className=\"card__title\">{title}</h3>\r\n      </Link>\r\n      <p>{author}</p>\r\n      <p>\r\n        <Moment format=\"D MMM YYYY\">{publishedAt}</Moment>\r\n      </p>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { BlogContext } from '../../context/BlogContext';\r\nimport PostCard from './PostCard';\r\nimport { v1 as uuidv1 } from 'uuid';\r\n\r\nconst PostList = () => {\r\n  const { blogPosts, getPosts, loading } = useContext(BlogContext);\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, []);\r\n\r\n  const postList = blogPosts.map((post, index) => {\r\n    return <PostCard key={index} post={post} postId={index} />;\r\n  });\r\n\r\n  console.log(blogPosts);\r\n\r\n  return (\r\n    <section className=\"posts\">\r\n      <h2>posts</h2>\r\n      {loading ? <div>Loading...</div> : <div className=\"posts__list\">{postList}</div>}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import React from 'react';\r\nimport Banner from '../layout/Banner';\r\nimport PostList from '../posts/PostList';\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div>\r\n      <Banner />\r\n      <PostList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { BlogContext } from '../../context/BlogContext';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport Moment from 'react-moment';\r\n\r\nconst PostPage = () => {\r\n  let { postId } = useParams();\r\n\r\n  console.log(postId);\r\n\r\n  const { currentBlogPost, blogPosts, getPostBYId, loading } = useContext(BlogContext);\r\n\r\n  useEffect(() => {\r\n    getPostBYId(postId);\r\n  }, []);\r\n\r\n  console.log(currentBlogPost, blogPosts);\r\n\r\n  return (\r\n    <div>\r\n      {currentBlogPost ? (\r\n        <article className=\"post\">\r\n          <img\r\n            className=\"card__image\"\r\n            alt=\"\"\r\n            src={\r\n              currentBlogPost[0].urlToImage\r\n                ? currentBlogPost[0].urlToImage\r\n                : `https://via.placeholder.com/300X150.png/eee/333?text=No+image+available`\r\n            }\r\n          />\r\n\r\n          <h3 className=\"card__title\">{currentBlogPost[0].title}</h3>\r\n          <p>{currentBlogPost[0].author}</p>\r\n          <p>\r\n            <Moment format=\"D MMM YYYY\">{currentBlogPost[0].publishedAt}</Moment>\r\n          </p>\r\n          <p>\r\n            {currentBlogPost[0].content} <a href={currentBlogPost[0].url}>read more...</a>\r\n          </p>\r\n        </article>\r\n      ) : (\r\n        <p className=\"error-message\">\r\n          No data to display please <Link to=\"/\">click here</Link>\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div>\r\n      App articles from <a href=\"https://newsapi.org\">NewsAPI.org</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './components/layout/Navbar';\nimport Home from './components/pages/HomePage';\nimport PostPage from './components/pages/PostPage';\nimport Footer from './components/layout/Footer';\nimport BlogContextProvider from './context/BlogContext';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BlogContextProvider>\n      <div className=\"App\">\n        <BrowserRouter>\n          <Navbar />\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/:postId\" exact component={PostPage} />\n          </Switch>\n          <Footer />\n        </BrowserRouter>\n      </div>\n    </BlogContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}